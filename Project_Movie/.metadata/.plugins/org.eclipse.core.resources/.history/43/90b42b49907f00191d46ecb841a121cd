import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;

public class ThreadGather {

}

class MovieThread extends Thread {
   Movie_View m_view;
   BufferedReader br;
   PrintWriter pw;
   String str = "";
   private ClientInfoClass clientinfo;
   private ConnectionPool cp = null;
   private Connection con = null;
   private PreparedStatement pstmt = null;
   private ResultSet rs = null;
   private ResultSetMetaData rsmd = null;

   // 생성자
   MovieThread(BufferedReader br, PrintWriter pw, Connection con, ConnectionPool cp) {
      m_view = new Movie_View();
      this.br = br;
      this.con = con;
      this.pw = pw;
      this.cp = cp;
      clientinfo = new ClientInfoClass(pw);
   }

   // 메세지 보내는 메서드
   void sendMsg(String msg) {
      pw.println(msg);
      pw.flush();
   }

   // 서버로 들어 오는 메세지 확인 메서드
   String recive() {

      try {
         if (str != null)
            str = br.readLine();

      } catch (IOException e) {
         e.printStackTrace();
         System.out.println("recive 메서드 예외처리 발생");
         return str = "";
      } catch (Exception e) {
         System.out.println("recive 메서드 예외처리 발생");
         return str = "";
      }
      return str;

   }

   // String 값을 Integer로 변환 가능 여부 확인 메소드
   boolean isInteger(String s) {
      try {
         Integer.parseInt(s);
      } catch (NumberFormatException e) {
         return false;
      } catch (NullPointerException e) {
         return false;
      }
      return true;
   }

   // 쿼리문을 받아 오면 ResultSet으로 담아서 Result Set으로 반환 하는 메소드
   ResultSet returnRS(String query) {
      try {
         pstmt = this.con.prepareStatement(query, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
         rs = pstmt.executeQuery();
      } catch (SQLException e) {
         e.printStackTrace();
         System.out.println("returnRS 예외처리 발생");
      }
      return rs;
   }

   // SQL 컬럼의 타입을 확인하고 컬럼에 맞는 타입으로 저장 하려는 메소드 메소드 현재 쓰지 않을 예정 구현만 함.
   void inputType(ResultSet rs) {
      int colsCount = 0;
      int inttmp0;
      String strtmp;
      try {
         // ResultMetaData 테이블의 정보를 알아올수있는 클래스
         rsmd = rs.getMetaData();
         // 실행되는 쿼리문의 컬럼 개수를 알아 온다
         colsCount = rsmd.getColumnCount();
         for (int i = 1; i < colsCount; i++) {

            if (rsmd.getColumnTypeName(i).equals("NUMBER")) {
               rs.next();
               inttmp0 = rs.getInt(i);
            } else if (rsmd.getColumnTypeName(i).equals("VARCHAR2")) {
               rs.next();
               strtmp = rs.getString(i);
            } else {
            }
         }

      } catch (SQLException e) {
         e.printStackTrace();
      }

   }

   // 선택한 번호를 입력 하면 clientinfo에 선택한 값 코드랑 이름 저장
   // ResultSet과 선택한 번호를 넘겨 주면 clieninfo에 저장 하는 메소드
   // 매점쪽은구현 해야 함
   void saveKeyValue(ResultSet rs, int num) {
      String key, keyname;
      String value = "";
      try {
         rsmd = rs.getMetaData();
         rs.absolute(num);
         key = rs.getString(1);
         keyname = rsmd.getColumnName(1);
         keyname = keyname.toLowerCase();
         value = rs.getString(2);
         if (keyname.equals("movie_code")) {
            clientinfo.setMovie_Code(key);
            clientinfo.setMovie_title(value);
         } else if (keyname.equals("m_center_code")) {
            clientinfo.setM_center_code(key);
            clientinfo.setM_center_name(value);
         }
         // 상영관 코드 저장
         else if (keyname.equals("sc_center_code")) {
            clientinfo.setSc_center_code(key);
            clientinfo.setSc_center_name(value);
         } else if (keyname.equals("m_center_code")) {
            clientinfo.setM_center_code(key);
            clientinfo.setM_center_name(value);
         } else if (keyname.equals("m_center_code")) {
            clientinfo.setM_center_code(key);
            clientinfo.setM_center_name(value);
         } else if (keyname.equals("screening_code")) {
            clientinfo.setScreening_code(key);
            clientinfo.setScreening_time(value);
         } else if (keyname.equals("seat_r_code")) {
            clientinfo.setSeat_reserve(key, value);
         }

      } catch (SQLException e) {

         e.printStackTrace();
         System.out.println("saveKeyValue 예외처리 발생");
      }
   }

   // 뒤로가기 넥스트 메서드
   // 구현 예정
   void stage_move(int movenum) {
      int stage = clientinfo.getStage();
      int move = stage - movenum;
      if (move >= 0) {
         if (move == 11) {
         }
         if (move == 21) {
         }
         if (move == 22) {
         }
         if (move == 31) {
         }
         if (move == 32) {
         }
         if (move == 33) {
         }
         if (move == 34) {
         }
         if (move == 35) {
         }
         if (move == 36) {
         }
         if (move == 37) {
         }

      } else {
         pw.println("현재 위치에서 이동하실수 없습니다.");
         System.out.println("움직일 수 없다.");
      }
   }

   // 현재 상영 중 영화를 보여 주는 메소드
   void movieshow() {
      int indexNum = 0;
      String query = "SELECT movie_title,movie_info FROM movie_kind ";
      rs = returnRS(query);
      try {
         while (rs.next()) {
            indexNum++;
            sendMsg(indexNum + "      : " + rs.getString(1));
            sendMsg("       : " + rs.getString(2));

         }
      } catch (SQLException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
      }
   }

   ///////////////// 수 지 로그인 공간////////////////////////////////////
   ///// 로그인 메소드 구현 하는 곳 /////////////////////////////////

   void login() {

   }

   /// 회원 가입 메소드 ////////////////
   //// 회원가입을 해서 INSERT INTO customer 과 ISNERT INTO customer_info에 저장 걸 만들면 된다용
   /// //////
   /// SQL로 연습한걸 그대로 붙여 놓으면 되는것..........
   void signUp() {

   }

   // 영화를 선택 하는 메소드
   void movieChoice() {
      boolean loop = true;
      // 영화 목록 뷰
      movieshow();
      // 영화를 선택했는지 유무
      if (clientinfo.getMovie_Code() != null) {
         pw.println("******************************************\n");
         pw.println("현재 선택 하신 영화는 : " + clientinfo.getMovie_title() + "입니다.");
         pw.println("\n******************************************");
         pw.flush();
      }
      String query = "SELECT movie_code,movie_title FROM movie_kind ";
      while (loop) {
         sendMsg("영화를 선택해 주세요");
         String select = recive();
         if (isInteger(select)) {
            int num = Integer.parseInt(select);
            rs = returnRS(query);
            saveKeyValue(rs, num);
            loop = false;
         } else {
            sendMsg(" 잘못 입력 하셨습니다. 다시 입력해 주세요");
         }
      }
      System.out.println("영화 선택 완료 ---------------- 출력 ");
      System.out.println(clientinfo.getMovie_Code() + "movie_code\n" + clientinfo.getMovie_title() + " movie 이름");
      if (clientinfo.getMovie_Code() != null) {
         movie_centerChoice();
      }
   }

   //////////// 영화관 지점 선택 //////////////////////////////////////////
   void movie_centerChoice() {
      int count = 0;
      String tmp, query, already = "";
      ;
      query = "SELECT m_center_code, m_center_name,m_center_addr FROM movie_center ";
      rs = returnRS(query);
      sendMsg("-----------영화관 선택-----------");
      if (clientinfo.getM_center_code() == null) {
         try {
            while (rs.next()) {
               count++;
               sendMsg(count + " : " + rs.getString(2) + "\t 위치" + rs.getString(3));
            }
            sendMsg("\n상영 하실 영화관을 선택해 주세요\n");
            tmp = recive();
            if (isInteger(tmp)) {
               int num = Integer.parseInt(tmp);
               saveKeyValue(rs, num);
            } else
               sendMsg("잘못 입력 하셨습니다.");

         } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
         }
      } else {
         already = "이미";
      }
      sendMsg(already + " 영화관 : " + clientinfo.getM_center_name() + " 지점을 선택 하셨습니다.");
      daytimeselect();
      System.out.println(clientinfo.getMovie_Code() + " clientinfo.getMovie_Code()" + clientinfo.getM_center_code()
            + " clientinfo.getM_center_code()");
   }

   ////////// 날짜와 시간을 선택 하는 메소드 ///////////////////////////////////
   void daytimeselect() {
      int indexnum = 0;
      boolean loop = true;
      pw.println("\n\n상영가능한 영화 날짜 시간\n\n");
      pw.flush();
      String query, movie_code, m_center_code;
      movie_code = clientinfo.getMovie_Code();
      m_center_code = clientinfo.getM_center_code();
      query = "SELECT screening_code, TO_CHAR(screening_time,'MM/DD:HH:MI') 날짜 FROM screening JOIN screen_center USING(sc_center_code) "
            + "WHERE m_center_code='" + m_center_code + "'" + " AND movie_code='" + movie_code
            + "' ORDER By 날짜 ASC ";
      rs = returnRS(query);
      try {
         if (rs.next()) {
            rs.first();
            while (rs.next()) {
               indexnum++;
               String tmp = rs.getString(2);
               sendMsg(indexnum + " ) " + tmp.substring(0, 2) + "월" + tmp.substring(3, 5) + "일 "
                     + tmp.substring(6, 8) + "시" + tmp.substring(9, tmp.length()) + "분\n");
            }
            while (loop) {
               sendMsg("원하시는 날짜를 선택해 주세요 ");
               String tmp = recive();
               if (isInteger(tmp)) {
                  int num = Integer.parseInt(tmp);
                  saveKeyValue(rs, num);
                  loop = false;
                  selectSeat();
               } else
                  sendMsg("잘 못 입력하셨습니다. 다시 입력해 주세요..");
            }

         } else
            sendMsg("상영 가능한 시간이 없습니다.");
      } catch (SQLException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
      }

   }

   /////////////////// 좌석 선택 메소드 //////////////////////////////////////
   //////////////// 본인이 입력한 정보에 따라 스크린관이 정해지고 //////////////////
   //////////// 그 스크린관에 해당 하는 좌석들이 나온다. ////////////////////////////

   void selectSeat() {

      // 좌석 쿼리 뷰 소스 ./////////////////////////////////////////
      ///////////////////////////////////////////////////////////////
      String seat_name = "", str_empty = "", tmp_str = "";
      int seat_empty = 0;
      int querycount = 0;
      int ticketNum = 0;
      String[][] seatjpg = new String[1][3];
      ArrayList<Integer> seat_check;
      boolean loop = true, loop0 = true;
      seatjpg[0][0] = "";
      seatjpg[0][1] = "";
      seatjpg[0][2] = "";
      String screening_code = clientinfo.getScreening_code();
      String query = "SELECT seat_r_code,seat_name,seat_r_empty FROM seat_reserve"
            + " NATURAL JOIN seat WHERE screening_code ='" + screening_code + "' ORDER BY seat_name ASC ";
      //////////////////////////////////////////////////////////////
      //////////// 티켓 예매 수 확인 ////////////////////////////////////
      try {
         while (loop0) {
            sendMsg("몇장 예매 하시겠습니까?");
            String tmp = br.readLine();
            if (isInteger(tmp) && Integer.parseInt(tmp) > 0) {
               ticketNum = Integer.parseInt(tmp);
               break;
            } else
               sendMsg("0 또는 잘 못 입력 하셨습니다.");

         }
         ///////// 좌석 그리는 코드 ///////////////////

         // SQL 좌석 저장개수로 arraylist 초기 용량 정함
         //
         rs = returnRS(query);
         rs.last();
         seat_check = new ArrayList<Integer>(rs.getRow());
         sendMsg(rs.getRow() + "  array 초기 용량 입니다.");

         for (int i = 0; i < ticketNum;i++) {
            rs = returnRS(query);
            querycount = 0;
            sendMsg("----------------------------------------------------------");
            sendMsg("|                                                        |");
            sendMsg("|       S       C       R       E       E       N        |");
            sendMsg("|                                                        |");
            sendMsg("----------------------------------------------------------\n");
            while (rs.next()) {

               // 5개 마다 끊어 주기 위한 카운터
               querycount++;
               seat_name = rs.getString(2);
               seat_empty = rs.getInt(3);
               // 좌석 가능 유무 임시 저장
               seat_check.add(seat_empty);
               if (seat_empty == 1) {
                  str_empty = "O";
               } else if (seat_empty == 0) {
                  str_empty = "X";
               }

               seatjpg[0][0] += "|" + String.format("%02d", querycount) + ": " + seat_name + "|  ";
               seatjpg[0][1] += "|예약가능:" + str_empty + "|  ";
               seatjpg[0][2] += "----------  ";
               if (querycount % 5 == 0) {
                  sendMsg(seatjpg[0][0]); 
                  sendMsg(seatjpg[0][1]);   
                  sendMsg(seatjpg[0][2]);
                  seatjpg[0][0] = "";
                  seatjpg[0][1] = ""; 
                  seatjpg[0][2] = "";
               }
            }

            //////////// 선택 하는 메소드 ////////////////////////////
            int nocount = 0;
            while (loop) {
               sendMsg("예약 하실 좌석의 번호를 선택해 주세요");
               tmp_str = recive();
               if (isInteger(tmp_str)) {
                  int tmp = Integer.parseInt(tmp_str);
                  if(seat_check.get(tmp-1)==1) {
                     saveKeyValue(rs, tmp);
                     sendMsg(clientinfo.getSeat_reserve().get(i).getSeat_name() + "을 선택하셨습니다.");
                     //////////// 선택 완료 clientinfo에 저장 ////////////////////////////
                     //////////// SQL 업데이트 ////////////////////////////////////////
                     String getSeat_r_code = clientinfo.getSeat_reserve().get(i).getSeat_r_code();
                     String updateQuery = "UPDATE seat_reserve SET SEAT_R_EMPTY = 0 WHERE SEAT_R_CODE='" + getSeat_r_code
                           + "'";
                     pstmt = con.prepareStatement(updateQuery);
                     pstmt.executeUpdate();
                     seat_check.clear();
                     break;
                  }
                  else { sendMsg("이미 선택된 좌석입니다. 다시 입력해 주세요"); }
               }   
                else { sendMsg("잘못 입력 하셨습니다. 다시 입력해 주세요");  }
                }
         }
         finalCheck();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
      } catch (Exception e) {
         e.printStackTrace();
         System.out.println("좌석 선택 에러");
         return;
      }

   }
   ///////////////////////////////////////////////////////
   /////////////// final Check ///////////////////////////
   //////////// 최종 확인 메소드 //////////////////////////////
   
   
   void finalCheck() {
      String strtmp;
      String cust_id,cust_name,cust_num;
      String movie_title,m_center_name,sc_center_name,screening_time;
      cust_id = clientinfo.getCust_id();
      cust_name = clientinfo.getCust_name();
      cust_num = clientinfo.getCust_num();
      movie_title =clientinfo.getMovie_title();
      m_center_name=clientinfo.getM_center_name();
      sc_center_name =clientinfo.getSc_center_name();
      screening_time = clientinfo.getScreening_time();
      
      sendMsg("최종 확인 하겠습니다.\n\n\n\n");
      sendMsg("-------------------------------------------------");
      sendMsg("| ** 예 매 내 역 **                                  ");
      sendMsg("|  고객 번호 :"+cust_num+"                          ");
      sendMsg("|    아이디 :"+cust_id+"                           ");
      sendMsg("|     성 함 :"+cust_name+"                         ");                
      sendMsg("|                                                ");
      sendMsg("|  영화 제목  :"+movie_title+"    지점:"+m_center_name);
      sendMsg("|  상 영 관   :"+sc_center_name+"                    ");
      sendMsg("|  상영시간  :"+screening_time+"                    ");
      sendMsg("|                                                ");
      sendMsg("-------------------------------------------------\n\n");
      sendMsg(" 위 사항이 맞습니까?  y/n \n Y를 누르시면 결제로 진행하겠습니다.");
      
      strtmp = recive();
      while(true) {
         if(strtmp.equals("y")||strtmp.equals("Y")) {
            sendMsg("결제 화면으로 진행 하겠습니다.");
            break;
         }
         else if(strtmp.equals("n") || strtmp.equals("N")) {
            clientinfo.allreset();
            sendMsg("장바구니를 초기화 하였습니다. 처음으로 이동 합니다.");
            break;
         }
         else 
            sendMsg("잘못 입력 하셨습니다. Y 또는 N을 입력 해 주세요");
         
      }

   }
   

   // 매점 이용 메소드
   ////////// 슬 아 담당 ////////////////////////
   ///////// 필요한 메소드 있으면 구현 하고 표시 해 놓으면 됨 ///////////////
   //////// 장바구니는 ArrayList snack_shopping List에 매점 물품 코드를 담아 놓고 ////////
   ///////
    // 매점 이용 메소드 
      //////////         슬                 아             담            당            ////////////////////////싫어싫어싫어시러시러시러싫다구!!!!!!!!!
      void popcornShow() {
         int indexNum = 0;
         String query = "SELECT snack_code, snack_name, snack_price FROM snack_menu WHERE snack_code LIKE 'SP%' ";
         rs = returnRS(query);
         try {
            while (rs.next()) {
               indexNum++;
               sendMsg(indexNum + "      : " + rs.getString(2));
               sendMsg("가격"+"       : " + rs.getString(3));
            }
         } catch (SQLException e) {
            e.printStackTrace();
         }
      }
      void drinkShow() {
         int indexNum = 0;
         String query = "SELECT snack_code, snack_name, snack_price FROM snack_menu WHERE snack_code LIKE 'SD%' ";
         rs = returnRS(query);
         try {
            while (rs.next()) {
               indexNum++;
               sendMsg(indexNum + "      : " + rs.getString(2));
               sendMsg("가격"+"       : " + rs.getString(3));
            }
         } catch (SQLException e) {
            e.printStackTrace();
         }
      }
      void icecreamShow() {
         int indexNum = 0;
         String query = "SELECT snack_code, snack_name, snack_price FROM snack_menu WHERE snack_code LIKE 'SI%' ";
         rs = returnRS(query);
         try {
            while (rs.next()) {
               indexNum++;
               sendMsg(indexNum + "      : " + rs.getString(2));
               sendMsg("가격"+"       : " + rs.getString(3));
            }
         } catch (SQLException e) {
            e.printStackTrace();
         }
      }
      void snackShow() {
         int indexNum = 0;
         String query = "SELECT snack_code, snack_name, snack_price FROM snack_menu WHERE snack_code LIKE 'SN%' ";
         rs = returnRS(query);
         try {
            while (rs.next()) {
               indexNum++;
               sendMsg(indexNum + "      : " + rs.getString(2));
               sendMsg("가격"+"       : " + rs.getString(3));
            }
         } catch (SQLException e) {
            e.printStackTrace();
         }
      }
      void snack_shopping() {
         boolean loop = true;
         int cnt = 0;
         while (loop) {
            String select = "";
            String cntSelect = "";
            String query = "";
            boolean isSelect = false;
            int count = 1;

            if(cnt == 0) {
               // 팝콘 메뉴 보여주기
               popcornShow();
               query = "SELECT snack_code, snack_name, snack_price FROM snack_menu WHERE snack_code LIKE 'SP%' ";
               sendMsg("팝콘을 선택해주세요. 선택하지 않으시려면 n을 입력하세요.");
               select = recive();
               if(select.equals("n") || select.equals("N")) {
                  cnt++;
               }
               else if(isInteger(select)){
                  isSelect = true;
               }
               else {
                  sendMsg("잘못 입력하셨습니다. 다시 입력해주시기 바랍니다.");
               }
            }
            if(cnt == 1) {
               // 음료 메뉴 보여주기
               drinkShow();
               query = "SELECT snack_code, snack_name, snack_price FROM snack_menu WHERE snack_code LIKE 'SD%' ";
               sendMsg("음료를 선택해주세요. 선택하지 않으시려면 n을 입력하세요.");
               select = recive();
               if(select.equals("n") || select.equals("N")) {
                  cnt++;
               }
               else if(isInteger(select)){
                  isSelect = true;
               }
               else {
                  sendMsg("잘못 입력하셨습니다. 다시 입력해주시기 바랍니다.");
               }
            }
            if(cnt == 2) {
               // 아이스크림 메뉴 보여주기
               icecreamShow();
               query = "SELECT snack_code, snack_name, snack_price FROM snack_menu WHERE snack_code LIKE 'SI%' ";
               sendMsg("아이스크림을 선택해주세요. 선택하지 않으시려면 n을 입력하세요.");
               select = recive();
               if(select.equals("n") || select.equals("N")) {
                  cnt++;
               }
               else if(isInteger(select)){
                  isSelect = true;
               }
               else {
                  sendMsg("잘못 입력하셨습니다. 다시 입력해주시기 바랍니다.");
               }
            }
            if(cnt == 3) {
               // 나머지 스낵 메뉴 보여주기
               snackShow();
               query = "SELECT snack_code, snack_name, snack_price FROM snack_menu WHERE snack_code LIKE 'SN%' ";
               sendMsg("스낵을 선택해주세요. 선택하지 않으시려면 n을 입력하세요.");
               select = recive();
               if(select.equals("n") || select.equals("N")) {
                  cnt++;
               }
               else if(isInteger(select)){
                  isSelect = true;
               }
               else {
                  sendMsg("잘못 입력하셨습니다. 다시 입력해주시기 바랍니다.");
               }
               break;
            }

            if(isSelect) {
               if (isInteger(select)) {
                  int num = Integer.parseInt(select);
                  rs = returnRS(query);
                  saveKeyValue(rs, num);
                  sendMsg("수량을 선택해주세요.");
                  cntSelect = recive();
                  if(isInteger(cntSelect)) {
                     count = Integer.parseInt(cntSelect);
                     clientinfo.getSnack_shopping().get(clientinfo.getSnack_shopping().size()-1).setSnack_count(count);
                  }
               }
               cnt++;
               isSelect = false;
            }
         }
         sendMsg("------------------------------------------------------/n");
         sendMsg("최종 선택하신 스낵 종류입니다");
         finalSelect();
         System.out.println("매점 선택 완료---------------");
         sendMsg("\n------------------------------------------------------");
         sendMsg("위의 내용이 맞으면 y 다시 고르시려면  n을 입력하세요.");
         try {
            String select = br.readLine();
            if(select.equals("y") || select.equals("Y")) {
               bill();
            }
            else if(select.equals("n") || select.equals("N")) {
               snack_shopping();
            }
            else {
               sendMsg("잘못 입력하셨습니다. 다시 입력해주세요.");
            }
         } catch (IOException e) {
            e.printStackTrace();
         }
      }
      void finalSelect() {
         int totalPrice = 0;
         for (int i = 0; i < clientinfo.getSnack_shopping().size(); i++) {
            if (clientinfo.getSnack_shopping().size() > 0) {
              String foodcode = clientinfo.getSnack_shopping().get(i).getSnack_code();
               String foodname = clientinfo.getSnack_shopping().get(i).getSnack_name();
               int foodprice = clientinfo.getSnack_shopping().get(i).getSnack_price();
               int foodcount = clientinfo.getSnack_shopping().get(i).getSnack_count();
               if(foodcode.substring(0, 2).equals("SP")) {
                  sendMsg("팝콘 : " + foodname);
                  sendMsg("수량 : " + foodcount);
                  sendMsg("가격 : " + foodprice);
                  totalPrice += foodprice*foodcount;
               }
               if(foodcode.substring(0, 2).equals("SD")) {
                  sendMsg("음료 : " + foodname);
                  sendMsg("수량 : " + foodcount);
                  sendMsg("가격 : " + foodprice);
                  totalPrice += foodprice*foodcount;
               }
               if(foodcode.substring(0, 2).equals("SI")) {
                  sendMsg("아이스크림 : " + foodname);
                  sendMsg("수량 : " + foodcount);
                  sendMsg("가격 : " + foodprice);
                  totalPrice += foodprice*foodcount;
               }
               if(foodcode.substring(0, 2).equals("SN")) {
                  sendMsg("스낵 : " + foodname);
                  sendMsg("수량 : " + foodcount);
                  sendMsg("가격 : " + foodprice);
                  totalPrice += foodprice*foodcount;
               }
            }
         }
         clientinfo.setSnackPrice(totalPrice);
      }

      // 장바구니에 담은걸 계산 하는 메소드
      // 장바구니에 담겨 있는 
      void bill() {
         sendMsg("------------------------------------------------------");
         finalSelect();
         sendMsg("------------------------------------------------------");
         sendMsg("결제할 총 금액 : " + clientinfo.getSnackPrice());
         sendMsg("------------------------------------------------------");
         sendMsg("결제하시려면 y 취소하시려면 n을 입력하세요.");
         String select = recive();
         if(select.equals("y") || select.equals("Y")) {
            sendMsg("결제가 완료되었습니다. 감사합니다.");
            try {
               Thread.sleep(1000);
            } catch (InterruptedException e) {
               e.printStackTrace();
            }
         }
         else if(select.equals("n") || select.equals("N")) {
            sendMsg(clientinfo.resetSnack());
            try {
               Thread.sleep(1000);
            } catch (InterruptedException e) {
               e.printStackTrace();
            }
         }
         else {
            sendMsg("잘못 입력하셨습니다.");
         }
      }

   ////// 쓰레드의 메인 메소드 ///////////////////////////////
   ///// 현재 5번은 clientinfo에 내가 선택한 값들을 리셋 하는 메소드임.///////
   public void run() {
      String msg = "";
      int choice = 0;
      while (true) {
         pw.println(m_view._2_1_FirstView());
         pw.flush();
         try {
            msg = recive();
            choice = Integer.parseInt(msg);
            switch (choice) {
            case 1:
               movieshow();
//               selectTest();
               break;
            case 2:
               // 영화 예매
               movieChoice();
               break;
            case 3:
               // 정보 조회
               break;
            case 4:
               snack_shopping();
               break;
            case 5:
               clientinfo.allreset();
               sendMsg("리셋 완료");
               break;

            }

         } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            System.out.println("Recive 예외처리 발생");
            break;
         } finally {
            try {
               if (rs != null)
                  rs.close();
               if (pstmt != null)
                  pstmt.close();
               if (con != null)
                  cp.releaseConnection(con);
            } catch (Exception e) {
               e.printStackTrace();
            }
         }

      }

   }
}